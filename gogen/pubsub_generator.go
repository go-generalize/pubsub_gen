package gogen

import (
	"io"
	"log"
	"text/template"
)

type generator struct {
	PackageName       string
	GeneratedFileName string
	FileName          string
	StructName        string
	TopicName         string
}

func (g *generator) generate(writer io.Writer) {
	t := template.Must(template.New("tmpl").Parse(tmpl))

	err := t.Execute(writer, g)

	if err != nil {
		log.Printf("failed to execute template: %+v", err)
	}
}

const tmpl = `// Code generated by pubsub generator DO NOT EDIT.
package {{.PackageName}}

import (
	"context"
	"encoding/json"

	"github.com/ORG_NAME/REPO_NAME/server/infra/pubsub"
)

const topic = "{{.TopicName}}"

` + `//go:generate mockgen -source {{.GeneratedFileName}}.go -destination mock_{{.GeneratedFileName}}/mock_{{.GeneratedFileName}}.go
type Publisher interface {
	Publish{{.StructName}}(ctx context.Context, subject *{{.StructName}}) error
}

type publisher struct {
	pubsubClient pubsub.Client
}

func NewPublisher(pubsubClient pubsub.Client) Publisher {
	return &publisher{pubsubClient: pubsubClient}
}

func (pub *publisher) Publish{{.StructName}}(ctx context.Context, subject *{{.StructName}}) error {
	serialized, err := json.Marshal(subject)

	if err != nil {
		return err
	}

	return pub.pubsubClient.Publish(ctx, topic, serialized)
}

type Subscriber interface {
	Run(ctx context.Context, message *{{.StructName}}) error
}

type pubSubHandler struct {
	sub Subscriber
}

func NewPubSubHandler(sub Subscriber) *pubSubHandler {
	return &pubSubHandler{sub: sub}
}

func (h *pubSubHandler) PubSubHandler(ctx context.Context, message *pubsub.Message) error {
	msg := &{{.StructName}}{}

	if err := json.Unmarshal(message.Data, msg); err != nil {
		return err
	}

	return h.sub.Run(ctx, msg)
}


`

// Code generated by pubsub generator DO NOT EDIT.
package task

import (
	"context"
	"encoding/json"

	"github.com/go-generalize/pubsub_gen/infra"
)

const topic = "task"

//go:generate mockgen -source task_gen.go -destination mock_task_gen/mock_task_gen.go
type Publisher interface {
	PublishTask(ctx context.Context, subject *Task) error
}

type publisher struct {
	pubsubClient infra.Client
}

func NewPublisher(pubsubClient pubsub.Client) Publisher {
	return &publisher{pubsubClient: pubsubClient}
}

func (pub *publisher) PublishTask(ctx context.Context, subject *Task) error {
	serialized, err := json.Marshal(subject)

	if err != nil {
		return err
	}

	return pub.pubsubClient.Publish(ctx, topic, serialized)
}

type Subscriber interface {
	Run(ctx context.Context, message *Task) error
}

type pubSubHandler struct {
	sub Subscriber
}

func NewPubSubHandler(sub Subscriber) *pubSubHandler {
	return &pubSubHandler{sub: sub}
}

func (h *pubSubHandler) PubSubHandler(ctx context.Context, message *pubsub.Message) error {
	msg := &Task{}

	if err := json.Unmarshal(message.Data, msg); err != nil {
		return err
	}

	return h.sub.Run(ctx, msg)
}



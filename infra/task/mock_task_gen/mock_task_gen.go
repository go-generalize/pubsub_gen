// Code generated by MockGen. DO NOT EDIT.
// Source: task_gen.go

// Package mock_task is a generated GoMock package.
package mock_task

import (
	context "context"
	task "github.com/go-generalize/pubsub_gen/infra/task"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPublisher is a mock of Publisher interface
type MockPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockPublisherMockRecorder
}

// MockPublisherMockRecorder is the mock recorder for MockPublisher
type MockPublisherMockRecorder struct {
	mock *MockPublisher
}

// NewMockPublisher creates a new mock instance
func NewMockPublisher(ctrl *gomock.Controller) *MockPublisher {
	mock := &MockPublisher{ctrl: ctrl}
	mock.recorder = &MockPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPublisher) EXPECT() *MockPublisherMockRecorder {
	return m.recorder
}

// PublishTask mocks base method
func (m *MockPublisher) PublishTask(ctx context.Context, subject *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishTask", ctx, subject)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishTask indicates an expected call of PublishTask
func (mr *MockPublisherMockRecorder) PublishTask(ctx, subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishTask", reflect.TypeOf((*MockPublisher)(nil).PublishTask), ctx, subject)
}

// MockSubscriber is a mock of Subscriber interface
type MockSubscriber struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriberMockRecorder
}

// MockSubscriberMockRecorder is the mock recorder for MockSubscriber
type MockSubscriberMockRecorder struct {
	mock *MockSubscriber
}

// NewMockSubscriber creates a new mock instance
func NewMockSubscriber(ctrl *gomock.Controller) *MockSubscriber {
	mock := &MockSubscriber{ctrl: ctrl}
	mock.recorder = &MockSubscriberMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSubscriber) EXPECT() *MockSubscriberMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockSubscriber) Run(ctx context.Context, message *task.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockSubscriberMockRecorder) Run(ctx, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockSubscriber)(nil).Run), ctx, message)
}
